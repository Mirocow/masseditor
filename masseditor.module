<?php

// http://www.drupal.ru/node/52457

function masseditor_perm() {
  return array('administer UC mass editor', 'use UC mass editor');
}

function masseditor_menu() {
  $items['admin/store/masseditor'] = array(
    'title' => 'Mass editing prices',
    'access arguments' => array('use UC mass editor'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('masseditor_editor_form'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/store/settings/masseditor'] = array(
    'title' => 'Mass editor settings',
    'access arguments' => array('administer UC mass editor'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('masseditor_settings_form'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

function _masseditor_default_settings() {
  return array(
    'model' => TRUE,
    'title' => TRUE,
    'list_price' => FALSE,
    'cost' => FALSE,
    'sell_price' => TRUE,
    'weight' => FALSE,
    'weight_units' => FALSE,
    'length' => FALSE,
    'width' => FALSE,
    'height' => FALSE,
    'length_units' => FALSE,
    'pkg_qty' => FALSE,
    'default_qty' => FALSE,
    'crs_sell_price' => FALSE,
    'crs_sell_price_cur' => FALSE,
  );
}

function _masseditor_default_options() {
  return array(
    'per_page' => 50,
  );
}

function masseditor_settings_form(&$form_state = NULL) {
  drupal_add_css(drupal_get_path('module', 'masseditor') . '/masseditor.css');
  
  $form['#tree'] = TRUE;
  $form['#theme'] = 'masseditor_settings_form';
  $form['fs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#collapsible' => FALSE, 
    '#collapsed' => FALSE,
  );
  
  $def_settings = _masseditor_default_settings();
  $settings = variable_get('masseditor_settings', array());
  foreach ($def_settings as $s_name => $s_value) {
    if (!isset($settings[$s_name])) {
      $settings[$s_name] = $s_value;
    }
  }

  if (db_table_exists('content_node_field_instance')) {
    $cck_settings = array();
    $products_types = uc_product_types();
    foreach($products_types as $products_type) {
      $fields_query = db_query("select field_name from {content_node_field_instance} where type_name = '%s' and widget_type in ('text_textarea', 'text_textfield')", $products_type);
      while($data = db_fetch_object($fields_query)) {
        $cck_settings[$data->field_name] = FALSE;
      }
    }
  }
  $settings += $cck_settings;

  $weight = 0;
  foreach ($settings as $setting_name => $setting_status) {
    $form['fs']['cb'][$setting_name] = array(
      '#type' => 'checkbox',
      '#title' => $setting_name,
      '#default_value' => $setting_status,
    );
    $form['fs']['we'][$setting_name] = array(
      '#type' => 'textfield',
      '#default_value' => $weight,
      '#size' => 2,
    );
    $weight++;
  }
  
  $masseditor_options = variable_get('masseditor_options', _masseditor_default_options());

  $form['fs']['opt']['per_page'] = array(
      '#type' => 'textfield', 
      '#title' => t('Items per page'), 
      '#default_value' => $masseditor_options['per_page'], 
      '#size' => 7, 
      '#maxlength' => 2, 
    );


  $form['fs']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  return $form;
}

function masseditor_settings_form_submit($form, &$form_state) {
  $new_settings = array();
  $cb_list = $form_state['clicked_button']['#post']['fs']['we'];
  foreach ($cb_list as $cb_name => $cb_old_order) {
    $new_settings[$cb_name] = (boolean)$form_state['values']['fs']['cb'][$cb_name];
  }
  $masseditor_options['per_page'] = $form_state['values']['fs']['opt']['per_page'];
  variable_set('masseditor_settings', $new_settings);
  variable_set('masseditor_options', $masseditor_options);
}

function masseditor_editor_form(&$form_state = NULL) {
  drupal_add_css(drupal_get_path('module', 'masseditor') . '/masseditor.css');
  
  $form['#tree'] = TRUE;  
  
  $context = array(
    'revision' => 'altered',
    'cache' => FALSE,
    'sign' => ' ',
    'sign_after' => FALSE,
    'dec' => ',',
    'thou' => ' ',
    'label' => FALSE,
  );
  $masseditor_settings = variable_get('masseditor_settings', _masseditor_default_settings());
  $masseditor_options = variable_get('masseditor_options', _masseditor_default_options());

  // Fill filter options from pagers' $_GET values
  if (isset($_GET['page']) && isset($_GET['filter']) && !isset($form_state['storage']['filter'])) {
    $form_state['storage']['filter'] = $_GET['filter'];
  }

  $form['filter'] = array(
      '#type' => 'fieldset', 
      '#title' => t('Filter by category'), 
  );

  $form['filter']['category'] = _taxonomy_term_select(t('Catalog'), NULL, isset($form_state['storage']['filter']['category']) ? $form_state['storage']['filter']['category'] : array(), variable_get('uc_catalog_vid', NULL), t('Hold Ctrl while clicking to select multiple categories.'), true, 0);

  $form['filter']['reset'] = array(
      '#type' => 'button', 
      '#value' => t('Reset'), 
      '#validate' => array('masseditor_editor_form_reset'),
  );

  $form['filter']['filter'] = array(
      '#type' => 'button', 
      '#value' => t('Filter'), 
      '#validate' => array('masseditor_editor_form_filter'),
  );

  // Collect TIDs to filter by
  $filter_tids = array();
  if (isset($form_state['storage']['filter']['category'])) {
    foreach ($form_state['storage']['filter']['category'] as $tid) {
      $filter_tids = array_merge($filter_tids, array($tid), array_keys(taxonomy_get_children($tid)));
    }
  }
  $filter_tids = array_unique($filter_tids);

  $dbr = pager_query("SELECT p.nid
    FROM {uc_products} AS p " . 
    (empty($filter_tids) ? "" : "LEFT JOIN {term_node} AS t ON (p.vid = t.vid) WHERE t.tid IN (" . implode(',', $filter_tids) . ") ") .
    "ORDER BY model ASC", $masseditor_options['per_page']);

  while ($data = db_fetch_object($dbr)) {
    $node = node_load($data->nid);

    foreach ($masseditor_settings as $s_name => $s_value) {
      if ($s_value) {
        switch($s_name) {
          case 'model':
            $form['p'][$node->nid][$s_name] = array(
              '#type' => 'textfield',
              '#size' => '15',
              '#default_value' => $node->$s_name,
            );
            break;
          case 'title':
            $form['p'][$node->nid][$s_name] = array(
              '#type' => 'textfield',
              '#size' => '60',
              '#default_value' => $node->$s_name,
            );
            break;
          case 'list_price':
          case 'cost':
          case 'sell_price':
          case 'crs_sell_price':
            $form['p'][$node->nid][$s_name] = array(
              '#type' => 'textfield',
              '#size' => '5',
              '#default_value' => uc_price($node->$s_name, $context) ,
            );
            break;
          case 'crs_sell_price_cur':
            $form['p'][$node->nid][$s_name] = array(
              '#type' => 'textfield',
              '#size' => '3',
              '#default_value' => $node->$s_name,
            );
            break;
          case 'weight':
          case 'length':
          case 'width':
          case 'height':
            $form['p'][$node->nid][$s_name] = array(
              '#type' => 'textfield',
              '#size' => '6',
              '#default_value' => $node->$s_name,
            );
            break;
          case 'length_units':
          case 'weight_units':
            $form['p'][$node->nid][$s_name] = array(
              '#type' => 'textfield',
              '#size' => '2',
              '#default_value' => $node->$s_name,
            );
            break;
          case 'pkg_qty':
          case 'default_qty':
            $form['p'][$node->nid][$s_name] = array(
              '#type' => 'textfield',
              '#size' => '5',
              '#default_value' => $node->$s_name,
            );
            break;

          default:
            if (db_table_exists('content_node_field_instance')) {
              $field_instance = db_fetch_object(db_query("select * from content_node_field_instance where field_name='%s' and type_name='%s'", $s_name, $node->type));
              if (!empty($field_instance)) {
                $field_instance->widget_settings = unserialize($field_instance->widget_settings);
                $field_instance->display_settings = unserialize($field_instance->display_settings);

                switch ($field_instance->widget_type) {
                  case 'text_textarea':
                    $form['p'][$node->nid][$s_name]['#type'] = 'textarea';
                    $form['p'][$node->nid][$s_name]['#title'] = $s_name;
                    $field = $node->$s_name;
                    $form['p'][$node->nid][$s_name]['#default_value'] = $field[0]['value'];
                    break;

                  case 'text_textfield':
                    $form['p'][$node->nid][$s_name]['#type'] = 'textfield';
                    $form['p'][$node->nid][$s_name]['#title'] = $s_name;
                    $field = $node->$s_name;
                    $form['p'][$node->nid][$s_name]['#default_value'] = $field[0]['value'];
                    break;
                }
              }
            }
            break;
        }
      }
    }
  }
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  return $form;
}

function masseditor_editor_form_filter($form, &$form_state) {
  $form_state['storage']['filter'] = $form_state['values']['filter'];
}

function masseditor_editor_form_reset($form, &$form_state) {
  unset($form_state['storage']['filter']);
  $form_state['rebuild'] = TRUE;
}

function masseditor_editor_form_submit($form, &$form_state) {
  $cck_enabled = db_table_exists('content_node_field_instance');
  foreach ($form_state['values']['p'] as $nid => $form_data) {
    $node = node_load($nid);
    foreach ($form_data as $key => $value) {
      $node->$key = $value;
    }

    if ($cck_enabled) {
      $fields_query = db_query("select field_name from {content_node_field_instance} where type_name = '%s'", $node->type);
      $fields = array();
      while($data = db_fetch_object($fields_query)) {
        $fields[] = $data->field_name;
      }

      foreach ($fields as $field) {
        if (array_key_exists($field, $form_data)) {
          $node->$field = array(
            0 => array(
              'value' => $form_data[$field],
            ),
          );
        }
      }
    }

    node_save($node);
  } 
}

function masseditor_theme($existing, $type, $theme, $path) {
  return array(
    'masseditor_editor_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'masseditor_settings_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

function theme_masseditor_editor_form($form) {  
  $masseditor_settings = variable_get('masseditor_settings', _masseditor_default_settings());
  $masseditor_options = variable_get('masseditor_options', _masseditor_default_options());
  
  $header = array();
  foreach ($masseditor_settings as $s_name => $s_value) {
    if ($s_value) {
      switch($s_name) {
        case 'model': $header[] = t('SKU'); break;
        case 'title': $header[] = t('Title'); break;
        case 'list_price': $header[] = t('List price'); break;
        case 'cost': $header[] = t('Cost'); break;
        case 'sell_price': $header[] = t('Sell price'); break;
        case 'weight': $header[] = t('Weight'); break;
        case 'weight_units': $header[] = t('Weight units'); break;
        case 'length': $header[] = t('Length'); break;
        case 'width': $header[] = t('Width'); break;
        case 'height': $header[] = t('Height'); break;
        case 'length_units': $header[] = t('Length units'); break;
        case 'pkg_qty': $header[] = t('Pkg qty'); break;
        case 'default_qty': $header[] = t('Default qty'); break;
      }
    }
  }
  
  $rows = array();
  foreach (element_children($form['p']) as $nid) {
    $row = array();
    
    foreach (element_children($form['p'][$nid]) as $s_name) {
      if ($masseditor_settings[$s_name]) {
        $row[] = drupal_render($form['p'][$nid][$s_name]);
      }
    }
    
    $rows[] = $row;
  }
  $table = theme('table', $header, $rows, array('class' => 'masseditor'));
  $table .= theme('pager', NULL, $masseditor_options['per_page'], 0);
  return drupal_render($form['filter']) . $table . drupal_render($form);
}

function theme_masseditor_settings_form($form) {  
  $header = array(t('Enabled'), t('Weight'));
  
  $rows = array();
  foreach (element_children($form['fs']['cb']) as $element_name) {
    $row = array();
    
    $row[] = drupal_render($form['fs']['cb'][$element_name]);
    
    $form['fs']['we'][$element_name]['#attributes']['class'] = 'we-weight';
    $row[] = drupal_render($form['fs']['we'][$element_name]);
    
    $rows[] = array(
      'data' => $row,
      'class' => 'draggable',
    );
  }
  drupal_add_tabledrag('settings-table', 'order', 'sibling', 'we-weight', NULL, NULL, TRUE, 0);
  $table = theme('table', $header, $rows, array('id' => 'settings-table'));
  
  unset($form['fs']['we']);
  unset($form['fs']['cb']);
  $form['fs'] = array('table' => array('#value' => $table)) + $form['fs'];
  
  return drupal_render($form);
}